// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.28.0
// source: api/app/v1/app.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAppBuy = "/api.app.v1.App/Buy"
const OperationAppBuyBox = "/api.app.v1.App/BuyBox"
const OperationAppEthAuthorize = "/api.app.v1.App/EthAuthorize"
const OperationAppExchange = "/api.app.v1.App/Exchange"
const OperationAppGetLand = "/api.app.v1.App/GetLand"
const OperationAppLandAddOutRate = "/api.app.v1.App/LandAddOutRate"
const OperationAppLandPlay = "/api.app.v1.App/LandPlay"
const OperationAppLandPlayFive = "/api.app.v1.App/LandPlayFive"
const OperationAppLandPlayFour = "/api.app.v1.App/LandPlayFour"
const OperationAppLandPlayOne = "/api.app.v1.App/LandPlayOne"
const OperationAppLandPlaySeven = "/api.app.v1.App/LandPlaySeven"
const OperationAppLandPlaySix = "/api.app.v1.App/LandPlaySix"
const OperationAppLandPlayThree = "/api.app.v1.App/LandPlayThree"
const OperationAppLandPlayTwo = "/api.app.v1.App/LandPlayTwo"
const OperationAppOpenBox = "/api.app.v1.App/OpenBox"
const OperationAppRentLand = "/api.app.v1.App/RentLand"
const OperationAppSell = "/api.app.v1.App/Sell"
const OperationAppSkateGet = "/api.app.v1.App/SkateGet"
const OperationAppSkateGetPlay = "/api.app.v1.App/SkateGetPlay"
const OperationAppStakeGit = "/api.app.v1.App/StakeGit"
const OperationAppTestSign = "/api.app.v1.App/TestSign"
const OperationAppUserBackList = "/api.app.v1.App/UserBackList"
const OperationAppUserBoxList = "/api.app.v1.App/UserBoxList"
const OperationAppUserIndexList = "/api.app.v1.App/UserIndexList"
const OperationAppUserInfo = "/api.app.v1.App/UserInfo"
const OperationAppUserLand = "/api.app.v1.App/UserLand"
const OperationAppUserMarketLandList = "/api.app.v1.App/UserMarketLandList"
const OperationAppUserMarketPropList = "/api.app.v1.App/UserMarketPropList"
const OperationAppUserMarketRentLandList = "/api.app.v1.App/UserMarketRentLandList"
const OperationAppUserMarketSeedList = "/api.app.v1.App/UserMarketSeedList"
const OperationAppUserMyMarketList = "/api.app.v1.App/UserMyMarketList"
const OperationAppUserNoticeList = "/api.app.v1.App/UserNoticeList"
const OperationAppUserOrderList = "/api.app.v1.App/UserOrderList"
const OperationAppUserRecommend = "/api.app.v1.App/UserRecommend"
const OperationAppUserRecommendL = "/api.app.v1.App/UserRecommendL"
const OperationAppUserSkateRewardList = "/api.app.v1.App/UserSkateRewardList"
const OperationAppUserStakeRewardList = "/api.app.v1.App/UserStakeRewardList"
const OperationAppWithdraw = "/api.app.v1.App/Withdraw"

type AppHTTPServer interface {
	// Buy  购买道具
	Buy(context.Context, *BuyRequest) (*BuyReply, error)
	// BuyBox  购买盲盒
	BuyBox(context.Context, *BuyBoxRequest) (*BuyBoxReply, error)
	EthAuthorize(context.Context, *EthAuthorizeRequest) (*EthAuthorizeReply, error)
	// Exchange 兑换
	Exchange(context.Context, *ExchangeRequest) (*ExchangeReply, error)
	// GetLand 合成土地
	GetLand(context.Context, *GetLandRequest) (*GetLandReply, error)
	// LandAddOutRate  培育
	LandAddOutRate(context.Context, *LandAddOutRateRequest) (*LandAddOutRateReply, error)
	// LandPlay  土地替换，收回
	LandPlay(context.Context, *LandPlayRequest) (*LandPlayReply, error)
	// LandPlayFive 浇水和出租的
	LandPlayFive(context.Context, *LandPlayFiveRequest) (*LandPlayFiveReply, error)
	// LandPlayFour 杀虫和出租的
	LandPlayFour(context.Context, *LandPlayFourRequest) (*LandPlayFourReply, error)
	// LandPlayOne  种植和出租的种植
	LandPlayOne(context.Context, *LandPlayOneRequest) (*LandPlayOneReply, error)
	// LandPlaySeven 手套偷别人
	LandPlaySeven(context.Context, *LandPlaySevenRequest) (*LandPlaySevenReply, error)
	// LandPlaySix 铲子铲别人
	LandPlaySix(context.Context, *LandPlaySixRequest) (*LandPlaySixReply, error)
	// LandPlayThree  施肥和出租的
	LandPlayThree(context.Context, *LandPlayThreeRequest) (*LandPlayThreeReply, error)
	// LandPlayTwo  收成熟植物和出租的
	LandPlayTwo(context.Context, *LandPlayTwoRequest) (*LandPlayTwoReply, error)
	// OpenBox  开盲盒
	OpenBox(context.Context, *OpenBoxRequest) (*OpenBoxReply, error)
	// RentLand  出租土地结束出租
	RentLand(context.Context, *RentLandRequest) (*RentLandReply, error)
	// Sell  出售道具下架道具
	Sell(context.Context, *SellRequest) (*SellReply, error)
	// SkateGet 放大器质押解压
	SkateGet(context.Context, *SkateGetRequest) (*SkateGetReply, error)
	// SkateGetPlay  放大器游戏
	SkateGetPlay(context.Context, *SkateGetPlayRequest) (*SkateGetPlayReply, error)
	// StakeGit 粮仓的质押和赎回
	StakeGit(context.Context, *StakeGitRequest) (*StakeGitReply, error)
	TestSign(context.Context, *TestSignRequest) (*TestSignReply, error)
	// UserBackList 仓库
	UserBackList(context.Context, *UserBackListRequest) (*UserBackListReply, error)
	// UserBoxList 盲盒列表
	UserBoxList(context.Context, *UserBoxListRequest) (*UserBoxListReply, error)
	// UserIndexList 首页
	UserIndexList(context.Context, *UserIndexListRequest) (*UserIndexListReply, error)
	// UserInfo 用户信息
	UserInfo(context.Context, *UserInfoRequest) (*UserInfoReply, error)
	// UserLand 土地背包列表
	UserLand(context.Context, *UserLandRequest) (*UserLandReply, error)
	// UserMarketLandList 市场 土地
	UserMarketLandList(context.Context, *UserMarketLandListRequest) (*UserMarketLandListReply, error)
	// UserMarketPropList 市场 道具
	UserMarketPropList(context.Context, *UserMarketPropListRequest) (*UserMarketPropListReply, error)
	// UserMarketRentLandList 市场 出租
	UserMarketRentLandList(context.Context, *UserMarketRentLandListRequest) (*UserMarketRentLandListReply, error)
	// UserMarketSeedList 市场 种子
	UserMarketSeedList(context.Context, *UserMarketSeedListRequest) (*UserMarketSeedListReply, error)
	// UserMyMarketList 市场 我的
	UserMyMarketList(context.Context, *UserMyMarketListRequest) (*UserMyMarketListReply, error)
	// UserNoticeList 通知
	UserNoticeList(context.Context, *UserNoticeListRequest) (*UserNoticeListReply, error)
	// UserOrderList 排行榜
	UserOrderList(context.Context, *UserOrderListRequest) (*UserOrderListReply, error)
	// UserRecommend 直推列表
	UserRecommend(context.Context, *UserRecommendRequest) (*UserRecommendReply, error)
	// UserRecommendL L1L2L3内容
	UserRecommendL(context.Context, *UserRecommendLRequest) (*UserRecommendLReply, error)
	// UserSkateRewardList 果实放大器 获奖记录
	UserSkateRewardList(context.Context, *UserSkateRewardListRequest) (*UserSkateRewardListReply, error)
	// UserStakeRewardList 粮仓列表
	UserStakeRewardList(context.Context, *UserStakeRewardListRequest) (*UserStakeRewardListReply, error)
	// Withdraw 提现
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawReply, error)
}

func RegisterAppHTTPServer(s *http.Server, srv AppHTTPServer) {
	r := s.Route("/")
	r.GET("/api/app_server/test_sign", _App_TestSign0_HTTP_Handler(srv))
	r.POST("/api/app_server/eth_authorize", _App_EthAuthorize0_HTTP_Handler(srv))
	r.GET("/api/app_server/user_info", _App_UserInfo0_HTTP_Handler(srv))
	r.GET("/api/app_server/user_recommend", _App_UserRecommend0_HTTP_Handler(srv))
	r.GET("/api/app_server/user_recommend_l", _App_UserRecommendL0_HTTP_Handler(srv))
	r.GET("/api/app_server/user_land", _App_UserLand0_HTTP_Handler(srv))
	r.GET("/api/app_server/user_stake_reward_list", _App_UserStakeRewardList0_HTTP_Handler(srv))
	r.GET("/api/app_server/user_box_list", _App_UserBoxList0_HTTP_Handler(srv))
	r.GET("/api/app_server/user_back_list", _App_UserBackList0_HTTP_Handler(srv))
	r.GET("/api/app_server/user_market_seed_list", _App_UserMarketSeedList0_HTTP_Handler(srv))
	r.GET("/api/app_server/user_market_land_list", _App_UserMarketLandList0_HTTP_Handler(srv))
	r.GET("/api/app_server/user_market_prop_list", _App_UserMarketPropList0_HTTP_Handler(srv))
	r.GET("/api/app_server/user_market_rent_land_list", _App_UserMarketRentLandList0_HTTP_Handler(srv))
	r.GET("/api/app_server/user_market_my_list", _App_UserMyMarketList0_HTTP_Handler(srv))
	r.GET("/api/app_server/user_notice_list", _App_UserNoticeList0_HTTP_Handler(srv))
	r.GET("/api/app_server/user_skate_reward_list", _App_UserSkateRewardList0_HTTP_Handler(srv))
	r.GET("/api/app_server/user_index_list", _App_UserIndexList0_HTTP_Handler(srv))
	r.GET("/api/app_server/user_order_list", _App_UserOrderList0_HTTP_Handler(srv))
	r.POST("/api/app_server/withdraw", _App_Withdraw0_HTTP_Handler(srv))
	r.POST("/api/app_server/exchange", _App_Exchange0_HTTP_Handler(srv))
	r.POST("/api/app_server/get_land", _App_GetLand0_HTTP_Handler(srv))
	r.POST("/api/app_server/stake_git", _App_StakeGit0_HTTP_Handler(srv))
	r.POST("/api/app_server/buy_box", _App_BuyBox0_HTTP_Handler(srv))
	r.POST("/api/app_server/open_box", _App_OpenBox0_HTTP_Handler(srv))
	r.POST("/api/app_server/sell", _App_Sell0_HTTP_Handler(srv))
	r.POST("/api/app_server/sell", _App_Buy0_HTTP_Handler(srv))
	r.POST("/api/app_server/rent_land", _App_RentLand0_HTTP_Handler(srv))
	r.POST("/api/app_server/land_add_out_rate", _App_LandAddOutRate0_HTTP_Handler(srv))
	r.POST("/api/app_server/skate_get", _App_SkateGet0_HTTP_Handler(srv))
	r.POST("/api/app_server/skate_get_play", _App_SkateGetPlay0_HTTP_Handler(srv))
	r.POST("/api/app_server/land_play", _App_LandPlay0_HTTP_Handler(srv))
	r.POST("/api/app_server/land_play_one", _App_LandPlayOne0_HTTP_Handler(srv))
	r.POST("/api/app_server/land_play_two", _App_LandPlayTwo0_HTTP_Handler(srv))
	r.POST("/api/app_server/land_play_three", _App_LandPlayThree0_HTTP_Handler(srv))
	r.POST("/api/app_server/land_play_four", _App_LandPlayFour0_HTTP_Handler(srv))
	r.POST("/api/app_server/land_play_five", _App_LandPlayFive0_HTTP_Handler(srv))
	r.POST("/api/app_server/land_play_six", _App_LandPlaySix0_HTTP_Handler(srv))
	r.POST("/api/app_server/land_play_seven", _App_LandPlaySeven0_HTTP_Handler(srv))
}

func _App_TestSign0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TestSignRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppTestSign)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TestSign(ctx, req.(*TestSignRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TestSignReply)
		return ctx.Result(200, reply)
	}
}

func _App_EthAuthorize0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EthAuthorizeRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppEthAuthorize)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EthAuthorize(ctx, req.(*EthAuthorizeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EthAuthorizeReply)
		return ctx.Result(200, reply)
	}
}

func _App_UserInfo0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserInfo(ctx, req.(*UserInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserInfoReply)
		return ctx.Result(200, reply)
	}
}

func _App_UserRecommend0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserRecommendRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUserRecommend)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserRecommend(ctx, req.(*UserRecommendRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserRecommendReply)
		return ctx.Result(200, reply)
	}
}

func _App_UserRecommendL0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserRecommendLRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUserRecommendL)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserRecommendL(ctx, req.(*UserRecommendLRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserRecommendLReply)
		return ctx.Result(200, reply)
	}
}

func _App_UserLand0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserLandRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUserLand)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserLand(ctx, req.(*UserLandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserLandReply)
		return ctx.Result(200, reply)
	}
}

func _App_UserStakeRewardList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserStakeRewardListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUserStakeRewardList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserStakeRewardList(ctx, req.(*UserStakeRewardListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserStakeRewardListReply)
		return ctx.Result(200, reply)
	}
}

func _App_UserBoxList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserBoxListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUserBoxList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserBoxList(ctx, req.(*UserBoxListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserBoxListReply)
		return ctx.Result(200, reply)
	}
}

func _App_UserBackList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserBackListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUserBackList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserBackList(ctx, req.(*UserBackListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserBackListReply)
		return ctx.Result(200, reply)
	}
}

func _App_UserMarketSeedList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserMarketSeedListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUserMarketSeedList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserMarketSeedList(ctx, req.(*UserMarketSeedListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserMarketSeedListReply)
		return ctx.Result(200, reply)
	}
}

func _App_UserMarketLandList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserMarketLandListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUserMarketLandList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserMarketLandList(ctx, req.(*UserMarketLandListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserMarketLandListReply)
		return ctx.Result(200, reply)
	}
}

func _App_UserMarketPropList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserMarketPropListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUserMarketPropList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserMarketPropList(ctx, req.(*UserMarketPropListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserMarketPropListReply)
		return ctx.Result(200, reply)
	}
}

func _App_UserMarketRentLandList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserMarketRentLandListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUserMarketRentLandList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserMarketRentLandList(ctx, req.(*UserMarketRentLandListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserMarketRentLandListReply)
		return ctx.Result(200, reply)
	}
}

func _App_UserMyMarketList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserMyMarketListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUserMyMarketList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserMyMarketList(ctx, req.(*UserMyMarketListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserMyMarketListReply)
		return ctx.Result(200, reply)
	}
}

func _App_UserNoticeList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserNoticeListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUserNoticeList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserNoticeList(ctx, req.(*UserNoticeListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserNoticeListReply)
		return ctx.Result(200, reply)
	}
}

func _App_UserSkateRewardList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserSkateRewardListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUserSkateRewardList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserSkateRewardList(ctx, req.(*UserSkateRewardListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserSkateRewardListReply)
		return ctx.Result(200, reply)
	}
}

func _App_UserIndexList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserIndexListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUserIndexList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserIndexList(ctx, req.(*UserIndexListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserIndexListReply)
		return ctx.Result(200, reply)
	}
}

func _App_UserOrderList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserOrderListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUserOrderList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserOrderList(ctx, req.(*UserOrderListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserOrderListReply)
		return ctx.Result(200, reply)
	}
}

func _App_Withdraw0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WithdrawRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppWithdraw)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Withdraw(ctx, req.(*WithdrawRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WithdrawReply)
		return ctx.Result(200, reply)
	}
}

func _App_Exchange0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExchangeRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppExchange)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Exchange(ctx, req.(*ExchangeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExchangeReply)
		return ctx.Result(200, reply)
	}
}

func _App_GetLand0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetLandRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppGetLand)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLand(ctx, req.(*GetLandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetLandReply)
		return ctx.Result(200, reply)
	}
}

func _App_StakeGit0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StakeGitRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppStakeGit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StakeGit(ctx, req.(*StakeGitRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StakeGitReply)
		return ctx.Result(200, reply)
	}
}

func _App_BuyBox0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BuyBoxRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppBuyBox)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BuyBox(ctx, req.(*BuyBoxRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BuyBoxReply)
		return ctx.Result(200, reply)
	}
}

func _App_OpenBox0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OpenBoxRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppOpenBox)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OpenBox(ctx, req.(*OpenBoxRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OpenBoxReply)
		return ctx.Result(200, reply)
	}
}

func _App_Sell0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SellRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppSell)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Sell(ctx, req.(*SellRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SellReply)
		return ctx.Result(200, reply)
	}
}

func _App_Buy0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BuyRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppBuy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Buy(ctx, req.(*BuyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BuyReply)
		return ctx.Result(200, reply)
	}
}

func _App_RentLand0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RentLandRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppRentLand)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RentLand(ctx, req.(*RentLandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RentLandReply)
		return ctx.Result(200, reply)
	}
}

func _App_LandAddOutRate0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LandAddOutRateRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppLandAddOutRate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LandAddOutRate(ctx, req.(*LandAddOutRateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LandAddOutRateReply)
		return ctx.Result(200, reply)
	}
}

func _App_SkateGet0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SkateGetRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppSkateGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SkateGet(ctx, req.(*SkateGetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SkateGetReply)
		return ctx.Result(200, reply)
	}
}

func _App_SkateGetPlay0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SkateGetPlayRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppSkateGetPlay)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SkateGetPlay(ctx, req.(*SkateGetPlayRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SkateGetPlayReply)
		return ctx.Result(200, reply)
	}
}

func _App_LandPlay0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LandPlayRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppLandPlay)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LandPlay(ctx, req.(*LandPlayRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LandPlayReply)
		return ctx.Result(200, reply)
	}
}

func _App_LandPlayOne0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LandPlayOneRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppLandPlayOne)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LandPlayOne(ctx, req.(*LandPlayOneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LandPlayOneReply)
		return ctx.Result(200, reply)
	}
}

func _App_LandPlayTwo0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LandPlayTwoRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppLandPlayTwo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LandPlayTwo(ctx, req.(*LandPlayTwoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LandPlayTwoReply)
		return ctx.Result(200, reply)
	}
}

func _App_LandPlayThree0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LandPlayThreeRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppLandPlayThree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LandPlayThree(ctx, req.(*LandPlayThreeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LandPlayThreeReply)
		return ctx.Result(200, reply)
	}
}

func _App_LandPlayFour0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LandPlayFourRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppLandPlayFour)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LandPlayFour(ctx, req.(*LandPlayFourRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LandPlayFourReply)
		return ctx.Result(200, reply)
	}
}

func _App_LandPlayFive0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LandPlayFiveRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppLandPlayFive)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LandPlayFive(ctx, req.(*LandPlayFiveRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LandPlayFiveReply)
		return ctx.Result(200, reply)
	}
}

func _App_LandPlaySix0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LandPlaySixRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppLandPlaySix)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LandPlaySix(ctx, req.(*LandPlaySixRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LandPlaySixReply)
		return ctx.Result(200, reply)
	}
}

func _App_LandPlaySeven0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LandPlaySevenRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppLandPlaySeven)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LandPlaySeven(ctx, req.(*LandPlaySevenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LandPlaySevenReply)
		return ctx.Result(200, reply)
	}
}

type AppHTTPClient interface {
	Buy(ctx context.Context, req *BuyRequest, opts ...http.CallOption) (rsp *BuyReply, err error)
	BuyBox(ctx context.Context, req *BuyBoxRequest, opts ...http.CallOption) (rsp *BuyBoxReply, err error)
	EthAuthorize(ctx context.Context, req *EthAuthorizeRequest, opts ...http.CallOption) (rsp *EthAuthorizeReply, err error)
	Exchange(ctx context.Context, req *ExchangeRequest, opts ...http.CallOption) (rsp *ExchangeReply, err error)
	GetLand(ctx context.Context, req *GetLandRequest, opts ...http.CallOption) (rsp *GetLandReply, err error)
	LandAddOutRate(ctx context.Context, req *LandAddOutRateRequest, opts ...http.CallOption) (rsp *LandAddOutRateReply, err error)
	LandPlay(ctx context.Context, req *LandPlayRequest, opts ...http.CallOption) (rsp *LandPlayReply, err error)
	LandPlayFive(ctx context.Context, req *LandPlayFiveRequest, opts ...http.CallOption) (rsp *LandPlayFiveReply, err error)
	LandPlayFour(ctx context.Context, req *LandPlayFourRequest, opts ...http.CallOption) (rsp *LandPlayFourReply, err error)
	LandPlayOne(ctx context.Context, req *LandPlayOneRequest, opts ...http.CallOption) (rsp *LandPlayOneReply, err error)
	LandPlaySeven(ctx context.Context, req *LandPlaySevenRequest, opts ...http.CallOption) (rsp *LandPlaySevenReply, err error)
	LandPlaySix(ctx context.Context, req *LandPlaySixRequest, opts ...http.CallOption) (rsp *LandPlaySixReply, err error)
	LandPlayThree(ctx context.Context, req *LandPlayThreeRequest, opts ...http.CallOption) (rsp *LandPlayThreeReply, err error)
	LandPlayTwo(ctx context.Context, req *LandPlayTwoRequest, opts ...http.CallOption) (rsp *LandPlayTwoReply, err error)
	OpenBox(ctx context.Context, req *OpenBoxRequest, opts ...http.CallOption) (rsp *OpenBoxReply, err error)
	RentLand(ctx context.Context, req *RentLandRequest, opts ...http.CallOption) (rsp *RentLandReply, err error)
	Sell(ctx context.Context, req *SellRequest, opts ...http.CallOption) (rsp *SellReply, err error)
	SkateGet(ctx context.Context, req *SkateGetRequest, opts ...http.CallOption) (rsp *SkateGetReply, err error)
	SkateGetPlay(ctx context.Context, req *SkateGetPlayRequest, opts ...http.CallOption) (rsp *SkateGetPlayReply, err error)
	StakeGit(ctx context.Context, req *StakeGitRequest, opts ...http.CallOption) (rsp *StakeGitReply, err error)
	TestSign(ctx context.Context, req *TestSignRequest, opts ...http.CallOption) (rsp *TestSignReply, err error)
	UserBackList(ctx context.Context, req *UserBackListRequest, opts ...http.CallOption) (rsp *UserBackListReply, err error)
	UserBoxList(ctx context.Context, req *UserBoxListRequest, opts ...http.CallOption) (rsp *UserBoxListReply, err error)
	UserIndexList(ctx context.Context, req *UserIndexListRequest, opts ...http.CallOption) (rsp *UserIndexListReply, err error)
	UserInfo(ctx context.Context, req *UserInfoRequest, opts ...http.CallOption) (rsp *UserInfoReply, err error)
	UserLand(ctx context.Context, req *UserLandRequest, opts ...http.CallOption) (rsp *UserLandReply, err error)
	UserMarketLandList(ctx context.Context, req *UserMarketLandListRequest, opts ...http.CallOption) (rsp *UserMarketLandListReply, err error)
	UserMarketPropList(ctx context.Context, req *UserMarketPropListRequest, opts ...http.CallOption) (rsp *UserMarketPropListReply, err error)
	UserMarketRentLandList(ctx context.Context, req *UserMarketRentLandListRequest, opts ...http.CallOption) (rsp *UserMarketRentLandListReply, err error)
	UserMarketSeedList(ctx context.Context, req *UserMarketSeedListRequest, opts ...http.CallOption) (rsp *UserMarketSeedListReply, err error)
	UserMyMarketList(ctx context.Context, req *UserMyMarketListRequest, opts ...http.CallOption) (rsp *UserMyMarketListReply, err error)
	UserNoticeList(ctx context.Context, req *UserNoticeListRequest, opts ...http.CallOption) (rsp *UserNoticeListReply, err error)
	UserOrderList(ctx context.Context, req *UserOrderListRequest, opts ...http.CallOption) (rsp *UserOrderListReply, err error)
	UserRecommend(ctx context.Context, req *UserRecommendRequest, opts ...http.CallOption) (rsp *UserRecommendReply, err error)
	UserRecommendL(ctx context.Context, req *UserRecommendLRequest, opts ...http.CallOption) (rsp *UserRecommendLReply, err error)
	UserSkateRewardList(ctx context.Context, req *UserSkateRewardListRequest, opts ...http.CallOption) (rsp *UserSkateRewardListReply, err error)
	UserStakeRewardList(ctx context.Context, req *UserStakeRewardListRequest, opts ...http.CallOption) (rsp *UserStakeRewardListReply, err error)
	Withdraw(ctx context.Context, req *WithdrawRequest, opts ...http.CallOption) (rsp *WithdrawReply, err error)
}

type AppHTTPClientImpl struct {
	cc *http.Client
}

func NewAppHTTPClient(client *http.Client) AppHTTPClient {
	return &AppHTTPClientImpl{client}
}

func (c *AppHTTPClientImpl) Buy(ctx context.Context, in *BuyRequest, opts ...http.CallOption) (*BuyReply, error) {
	var out BuyReply
	pattern := "/api/app_server/sell"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppBuy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) BuyBox(ctx context.Context, in *BuyBoxRequest, opts ...http.CallOption) (*BuyBoxReply, error) {
	var out BuyBoxReply
	pattern := "/api/app_server/buy_box"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppBuyBox))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) EthAuthorize(ctx context.Context, in *EthAuthorizeRequest, opts ...http.CallOption) (*EthAuthorizeReply, error) {
	var out EthAuthorizeReply
	pattern := "/api/app_server/eth_authorize"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppEthAuthorize))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) Exchange(ctx context.Context, in *ExchangeRequest, opts ...http.CallOption) (*ExchangeReply, error) {
	var out ExchangeReply
	pattern := "/api/app_server/exchange"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppExchange))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) GetLand(ctx context.Context, in *GetLandRequest, opts ...http.CallOption) (*GetLandReply, error) {
	var out GetLandReply
	pattern := "/api/app_server/get_land"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppGetLand))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) LandAddOutRate(ctx context.Context, in *LandAddOutRateRequest, opts ...http.CallOption) (*LandAddOutRateReply, error) {
	var out LandAddOutRateReply
	pattern := "/api/app_server/land_add_out_rate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppLandAddOutRate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) LandPlay(ctx context.Context, in *LandPlayRequest, opts ...http.CallOption) (*LandPlayReply, error) {
	var out LandPlayReply
	pattern := "/api/app_server/land_play"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppLandPlay))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) LandPlayFive(ctx context.Context, in *LandPlayFiveRequest, opts ...http.CallOption) (*LandPlayFiveReply, error) {
	var out LandPlayFiveReply
	pattern := "/api/app_server/land_play_five"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppLandPlayFive))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) LandPlayFour(ctx context.Context, in *LandPlayFourRequest, opts ...http.CallOption) (*LandPlayFourReply, error) {
	var out LandPlayFourReply
	pattern := "/api/app_server/land_play_four"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppLandPlayFour))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) LandPlayOne(ctx context.Context, in *LandPlayOneRequest, opts ...http.CallOption) (*LandPlayOneReply, error) {
	var out LandPlayOneReply
	pattern := "/api/app_server/land_play_one"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppLandPlayOne))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) LandPlaySeven(ctx context.Context, in *LandPlaySevenRequest, opts ...http.CallOption) (*LandPlaySevenReply, error) {
	var out LandPlaySevenReply
	pattern := "/api/app_server/land_play_seven"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppLandPlaySeven))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) LandPlaySix(ctx context.Context, in *LandPlaySixRequest, opts ...http.CallOption) (*LandPlaySixReply, error) {
	var out LandPlaySixReply
	pattern := "/api/app_server/land_play_six"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppLandPlaySix))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) LandPlayThree(ctx context.Context, in *LandPlayThreeRequest, opts ...http.CallOption) (*LandPlayThreeReply, error) {
	var out LandPlayThreeReply
	pattern := "/api/app_server/land_play_three"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppLandPlayThree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) LandPlayTwo(ctx context.Context, in *LandPlayTwoRequest, opts ...http.CallOption) (*LandPlayTwoReply, error) {
	var out LandPlayTwoReply
	pattern := "/api/app_server/land_play_two"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppLandPlayTwo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) OpenBox(ctx context.Context, in *OpenBoxRequest, opts ...http.CallOption) (*OpenBoxReply, error) {
	var out OpenBoxReply
	pattern := "/api/app_server/open_box"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppOpenBox))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) RentLand(ctx context.Context, in *RentLandRequest, opts ...http.CallOption) (*RentLandReply, error) {
	var out RentLandReply
	pattern := "/api/app_server/rent_land"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppRentLand))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) Sell(ctx context.Context, in *SellRequest, opts ...http.CallOption) (*SellReply, error) {
	var out SellReply
	pattern := "/api/app_server/sell"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppSell))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) SkateGet(ctx context.Context, in *SkateGetRequest, opts ...http.CallOption) (*SkateGetReply, error) {
	var out SkateGetReply
	pattern := "/api/app_server/skate_get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppSkateGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) SkateGetPlay(ctx context.Context, in *SkateGetPlayRequest, opts ...http.CallOption) (*SkateGetPlayReply, error) {
	var out SkateGetPlayReply
	pattern := "/api/app_server/skate_get_play"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppSkateGetPlay))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) StakeGit(ctx context.Context, in *StakeGitRequest, opts ...http.CallOption) (*StakeGitReply, error) {
	var out StakeGitReply
	pattern := "/api/app_server/stake_git"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppStakeGit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) TestSign(ctx context.Context, in *TestSignRequest, opts ...http.CallOption) (*TestSignReply, error) {
	var out TestSignReply
	pattern := "/api/app_server/test_sign"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppTestSign))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) UserBackList(ctx context.Context, in *UserBackListRequest, opts ...http.CallOption) (*UserBackListReply, error) {
	var out UserBackListReply
	pattern := "/api/app_server/user_back_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppUserBackList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) UserBoxList(ctx context.Context, in *UserBoxListRequest, opts ...http.CallOption) (*UserBoxListReply, error) {
	var out UserBoxListReply
	pattern := "/api/app_server/user_box_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppUserBoxList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) UserIndexList(ctx context.Context, in *UserIndexListRequest, opts ...http.CallOption) (*UserIndexListReply, error) {
	var out UserIndexListReply
	pattern := "/api/app_server/user_index_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppUserIndexList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...http.CallOption) (*UserInfoReply, error) {
	var out UserInfoReply
	pattern := "/api/app_server/user_info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) UserLand(ctx context.Context, in *UserLandRequest, opts ...http.CallOption) (*UserLandReply, error) {
	var out UserLandReply
	pattern := "/api/app_server/user_land"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppUserLand))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) UserMarketLandList(ctx context.Context, in *UserMarketLandListRequest, opts ...http.CallOption) (*UserMarketLandListReply, error) {
	var out UserMarketLandListReply
	pattern := "/api/app_server/user_market_land_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppUserMarketLandList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) UserMarketPropList(ctx context.Context, in *UserMarketPropListRequest, opts ...http.CallOption) (*UserMarketPropListReply, error) {
	var out UserMarketPropListReply
	pattern := "/api/app_server/user_market_prop_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppUserMarketPropList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) UserMarketRentLandList(ctx context.Context, in *UserMarketRentLandListRequest, opts ...http.CallOption) (*UserMarketRentLandListReply, error) {
	var out UserMarketRentLandListReply
	pattern := "/api/app_server/user_market_rent_land_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppUserMarketRentLandList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) UserMarketSeedList(ctx context.Context, in *UserMarketSeedListRequest, opts ...http.CallOption) (*UserMarketSeedListReply, error) {
	var out UserMarketSeedListReply
	pattern := "/api/app_server/user_market_seed_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppUserMarketSeedList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) UserMyMarketList(ctx context.Context, in *UserMyMarketListRequest, opts ...http.CallOption) (*UserMyMarketListReply, error) {
	var out UserMyMarketListReply
	pattern := "/api/app_server/user_market_my_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppUserMyMarketList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) UserNoticeList(ctx context.Context, in *UserNoticeListRequest, opts ...http.CallOption) (*UserNoticeListReply, error) {
	var out UserNoticeListReply
	pattern := "/api/app_server/user_notice_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppUserNoticeList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) UserOrderList(ctx context.Context, in *UserOrderListRequest, opts ...http.CallOption) (*UserOrderListReply, error) {
	var out UserOrderListReply
	pattern := "/api/app_server/user_order_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppUserOrderList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) UserRecommend(ctx context.Context, in *UserRecommendRequest, opts ...http.CallOption) (*UserRecommendReply, error) {
	var out UserRecommendReply
	pattern := "/api/app_server/user_recommend"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppUserRecommend))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) UserRecommendL(ctx context.Context, in *UserRecommendLRequest, opts ...http.CallOption) (*UserRecommendLReply, error) {
	var out UserRecommendLReply
	pattern := "/api/app_server/user_recommend_l"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppUserRecommendL))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) UserSkateRewardList(ctx context.Context, in *UserSkateRewardListRequest, opts ...http.CallOption) (*UserSkateRewardListReply, error) {
	var out UserSkateRewardListReply
	pattern := "/api/app_server/user_skate_reward_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppUserSkateRewardList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) UserStakeRewardList(ctx context.Context, in *UserStakeRewardListRequest, opts ...http.CallOption) (*UserStakeRewardListReply, error) {
	var out UserStakeRewardListReply
	pattern := "/api/app_server/user_stake_reward_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppUserStakeRewardList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...http.CallOption) (*WithdrawReply, error) {
	var out WithdrawReply
	pattern := "/api/app_server/withdraw"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppWithdraw))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
